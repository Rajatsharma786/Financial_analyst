name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCR_REGION: australia-southeast1
  STREAMLIT_SERVICE_NAME: financial-analyst
  SCHEDULER_SERVICE_NAME: financial-analyst-scheduler
  STREAMLIT_IMAGE_NAME: financial-analyst-streamlit
  SCHEDULER_IMAGE_NAME: financial-analyst-scheduler

jobs:
  test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        run: |
          pytest tests/ || echo "No tests found, skipping..."

  build-and-push:
    name: Build and Push to GCR
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker credentials
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build Docker images
        run: |
          # Build Streamlit app image
          docker build -f Dockerfile.streamlit -t financial-analyst-streamlit:latest .
          docker tag financial-analyst-streamlit:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-streamlit:${{ github.sha }}
          docker tag financial-analyst-streamlit:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-streamlit:latest
          
          # Build Scheduler API image
          docker build -f Dockerfile.scheduler -t financial-analyst-scheduler:latest .
          docker tag financial-analyst-scheduler:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-scheduler:${{ github.sha }}
          docker tag financial-analyst-scheduler:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-scheduler:latest

      - name: Push Docker images to GCR
        run: |
          # Push Streamlit image
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-streamlit:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-streamlit:latest
          
          # Push Scheduler image
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-scheduler:${{ github.sha }}
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/financial-analyst-scheduler:latest

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          # Deploy Streamlit Service (Main App)
          echo "Deploying Streamlit service..."
          gcloud run services delete ${{ env.STREAMLIT_SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.GCR_REGION }} \
            --quiet || true
          
          gcloud run deploy ${{ env.STREAMLIT_SERVICE_NAME }} \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.STREAMLIT_IMAGE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCR_REGION }} \
            --allow-unauthenticated \
            --port 8501 \
            --memory 2Gi \
            --cpu 2 \
            --timeout 300 \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},MARKETAUX_API_KEY=${{ secrets.MARKETAUX_API_KEY }},OPENBB_PAT=${{ secrets.OPENBB_PAT }},AZURE_POSTGRES_PASSWORD=${{ secrets.AZURE_POSTGRES_PASSWORD }}"
          
          # Deploy Scheduler Service (Newsletter API)
          echo "Deploying Scheduler service..."
          gcloud run services delete ${{ env.SCHEDULER_SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.GCR_REGION }} \
            --quiet || true
          
          gcloud run deploy ${{ env.SCHEDULER_SERVICE_NAME }} \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.SCHEDULER_IMAGE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCR_REGION }} \
            --allow-unauthenticated \
            --port 8000 \
            --memory 1Gi \
            --cpu 1 \
            --timeout 300 \
            --set-env-vars "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},MARKETAUX_API_KEY=${{ secrets.MARKETAUX_API_KEY }},OPENBB_PAT=${{ secrets.OPENBB_PAT }},EMAIL_SENDER=${{ secrets.EMAIL_SENDER }},EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }},SMTP_SERVER=${{ secrets.SMTP_SERVER }},SMTP_PORT=${{ secrets.SMTP_PORT }},AZURE_POSTGRES_PASSWORD=${{ secrets.AZURE_POSTGRES_PASSWORD }}"

      - name: Show deployment URLs
        run: |
          echo "Streamlit App URL:"
          gcloud run services describe ${{ env.STREAMLIT_SERVICE_NAME }} --platform managed --region ${{ env.GCR_REGION }} --format 'value(status.url)'
          echo "Scheduler API URL:"
          gcloud run services describe ${{ env.SCHEDULER_SERVICE_NAME }} --platform managed --region ${{ env.GCR_REGION }} --format 'value(status.url)'